# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CD with Gradle

on:
  push:
    branches: [ "CD-back-test" ]

jobs:
   # ===================================================================
   #  Job 1: Docker 이미지를 빌드하고 Docker Hub에 푸시
   # ===================================================================
   build-and-push:
     runs-on: ubuntu-latest
     steps:
       # 1. 소스 코드 체크아웃
       - name: Checkout
         uses: actions/checkout@v3
 
       # 2. Docker Hub에 로그인
       - name: Login to Docker Hub
         uses: docker/login-action@v3
         with:
           username: hy7012 # Docker Hub 사용자 이름
           password: ${{ secrets.DOCKERHUB_TOKEN }} # Access Token은 Secret으로 유지
 
       # 3. Docker Buildx 설정 (빌드 성능 최적화)
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3
 
       # 4. Docker 이미지 빌드 및 푸시
       # 릴리즈 태그(예: v1.0.1)와 latest 태그를 모두 푸시합니다.
       - name: Build and push
         uses: docker/build-push-action@v5
         with:
           context: ./back
           push: true
           tags: |
             hy7012/pls-jober-backend:latest
             hy7012/pls-jober-backend:${{ github.ref_name }}
 
   # ===================================================================
   #  Job 2: Oracle Cloud VM에 최신 Docker 이미지를 배포
   # ===================================================================
   deploy-to-oci:
     needs: build-and-push # build-and-push 잡이 성공해야 실행
     runs-on: ubuntu-latest
     environment: production # GitHub 환경 보호 규칙 사용 가능
 
     steps:
       # 1. SSH를 사용하여 OCI VM에서 배포 스크립트 실행
       - name: Deploy to Oracle Cloud VM
         uses: appleboy/ssh-action@master
         with:
           host: 134.185.106.160       # 오라클 클라우드 VM IP 주소
           username: ubuntu              # Ubuntu OS의 기본 사용자 이름
           key: ${{ secrets.SSH_PRIVATE }} # SSH 개인키는 Secret으로 유지
           script: |
             # Docker Hub에서 최신 이미지를 pull
             docker pull hy7012/pls-jober-backend:latest
             # 기존 컨테이너가 있으면 중지하고 삭제
             if [ $(docker ps -q -f name=pls-jober-container) ]; then
               docker stop pls-jober-container
               docker rm pls-jober-container
             fi
             # 새 컨테이너 실행 (서버에 미리 생성해둔 .env 파일 사용)
             docker run -d -p 8080:8080 --env-file /home/ubuntu/.env --name pls-jober-container hy7012/pls-jober-backend:latest
             # 사용하지 않는 Docker 이미지 정리 (디스크 공간 확보)
             docker image prune -f
             echo "Deployment complete."
